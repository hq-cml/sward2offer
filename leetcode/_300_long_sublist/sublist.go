/*
*

	*给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。

子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

示例 1：

输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
示例 2：

输入：nums = [0,1,0,3,2,3]
输出：4
示例 3：

输入：nums = [7,7,7,7,7,7,7]
输出：1
*/
package _300_long_sublist

// 思路：明显应该往动态规划上去靠，关键是如何设计dp方程
//
//	dp[i]表示[0,i]子数组里面，最长的子序列长度，则
//	dp[i+1]应该是[0... i]所有的字符中，满足如下条件：
//	nums[k] < nums[i+1] && dp[k]+1，所有的这样的值中，最大的那个就是dp[i+1]
func SubList(nums []int) int {
	if len(nums) == 0 {
		return 0
	}

	// 初始化都是1，因为1个元素的子序列也是满足条件的
	dp := make([]int, len(nums))
	for i := 0; i < len(nums); i++ {
		dp[i] = 1
	}

	// 从第二个开始
	var max int = 1
	for i := 1; i < len(nums); i++ {
		for j := i - 1; j >= 0; j-- {
			if nums[j] < nums[i] && dp[j]+1 > dp[i] {
				dp[i] = dp[j] + 1
				if dp[i] > max {
					max = dp[i]
				}
			}
		}
	}
	return max
}
